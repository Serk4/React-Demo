name: CI/CD Pipeline

on:
  push:
    branches: [main, feature/*]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: windows-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            server/package-lock.json

      - name: Install frontend dependencies
        run: npm ci

      - name: Install backend dependencies
        run: |
          cd server
          npm ci

      - name: Setup LocalDB
        run: |
          # Start LocalDB service
          sqllocaldb start MSSQLLocalDB

          # Create test database
          sqlcmd -S "(localdb)\MSSQLLocalDB" -E -Q "IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'React-Demo-Test') CREATE DATABASE [React-Demo-Test]"

          # Verify LocalDB is running
          sqllocaldb info MSSQLLocalDB

      - name: Run API tests
        run: |
          cd server
          npm test
        env:
          NODE_ENV: test

      - name: Generate test coverage
        run: |
          cd server
          npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./server/coverage
          flags: api-tests
          name: codecov-umbrella

      - name: Build frontend
        run: npm run build

      - name: Test frontend build
        run: |
          # Test that the build was successful
          if (Test-Path "dist") {
            Write-Host "‚úÖ Frontend build successful"
          } else {
            Write-Host "‚ùå Frontend build failed"
            exit 1
          }

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true

  security:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci

      - name: Run security audit
        run: |
          npm audit --audit-level moderate
          cd server && npm audit --audit-level moderate

      - name: Check for vulnerabilities
        run: |
          npx audit-ci --moderate
          cd server && npx audit-ci --moderate

  deploy:
    needs: [test, lint, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install and build
        run: |
          npm ci
          npm run build

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          # Add your deployment commands here
          # For example, deploy to Azure, AWS, or your preferred platform

      - name: Run integration tests
        run: |
          echo "üß™ Running integration tests on staging..."
          # Add integration test commands here

      - name: Deploy to production
        if: success()
        run: |
          echo "üéâ Deploying to production environment..."
          # Add production deployment commands here
